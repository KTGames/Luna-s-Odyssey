[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float strength = 200.0;
uniform float out_slope = -10.0;
uniform float in_slope = 80.0;
uniform float intersect_dist = 0.2;
uniform float intersect_mult = 4.0;
uniform vec4 color_mult = vec4(1.0, 1.0, 1.0, 1.0);

vec2 tex_center_in_screen_uv(vec2 tex_uv, vec2 screen_uv, vec2 texture_pixel_size, vec2 screen_pixel_size) {
	vec2 dist_tex = vec2(0.5, 0.5) - tex_uv;
	vec2 dist_pixel = dist_tex / texture_pixel_size;
	vec2 dist_screen = dist_pixel * screen_pixel_size;
	dist_screen.y *= -1.0;
	return screen_uv + dist_screen;
}

void fragment() {
		vec2 uv = UV;
		vec2 screen_uv = SCREEN_UV;
		vec2 tex_size = TEXTURE_PIXEL_SIZE;
		vec2 screen_size = SCREEN_PIXEL_SIZE;
		vec2 center_tex_screen_uv = tex_center_in_screen_uv(uv, screen_uv, tex_size, screen_size);
		float aspect = SCREEN_PIXEL_SIZE.y / SCREEN_PIXEL_SIZE.x;
	
		vec2 rel = (uv - vec2(0.5, 0.5));
		float angle = length(rel)*strength;
		angle = fract(angle / (2.0*3.14159265)) * (2.0 * 3.14159265);
	
		mat2 rot = mat2(vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle)));
		vec2 coord = screen_uv - center_tex_screen_uv;
	rel = vec2(coord.x * aspect, coord.y) * rot;
	vec2 final_uv = clamp(vec2((rel.x/aspect) + center_tex_screen_uv.x, rel.y + center_tex_screen_uv.y), vec2(0,0), vec2(1,1));

		vec4 final_color = textureLod(SCREEN_TEXTURE, final_uv, 0.0);
	
		float dist_center = length(uv - vec2(0.5, 0.5));
	
		vec2 tex_uv = UV;
		tex_uv = (tex_uv = vec2(0.5, 0.5)) * rot;
		tex_uv = clamp(tex_uv + vec2(0.5,0.5), vec2(0,0), vec2(1,1));
		vec4 tex_color = textureLod(TEXTURE, tex_uv, 0.0) * 2.0;
		final_color = mix(tex_color, final_color, dist_center*4.0);
	
		float mult = 1.0;
		float b1 = intersect_mult - (out_slope * intersect_dist);
		float b2 = intersect_mult - (in_slope * intersect_dist);
	
		if (dist_center >= intersect_dist) {
			mult = out_slope * dist_center + b1;
			mult = clamp(mult, 1.0, intersect_mult);
			final_color *= mult;
		}
		else {
			mult = in_slope * dist_center + b2;
			mult = clamp(mult, 0.0, intersect_mult);
			final_color *= mult;
		}
	
		final_color *= color_mult;
		
		final_color.a = 1.0;
	
		vec4 normal_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
		//float mixer = smoothstep(0.3, 0.5, dist_center);
		float mixer = clamp(dist_center*2.0, 0.0, 1.0);
		final_color = mix(final_color, normal_color, mixer);
	
		COLOR.rgba = final_color;
}"

[resource]
shader = SubResource( 1 )
shader_param/strength = 3.064
shader_param/out_slope = -17.22
shader_param/in_slope = 58.0
shader_param/intersect_dist = 0.25
shader_param/intersect_mult = 3.14
shader_param/color_mult = Plane( 0.85, 0.991, 1, 0.5 )
